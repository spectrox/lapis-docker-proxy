worker_processes 1;
error_log stderr notice;
pid logs/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include mime.types;

    map $host $project_host {
        "~^(?<project>[^\.]+)\.(?<user>[^\.]+)\.(?<zone>.*)$" "$project.$zone";
    }

    map $host $user_host {
        "~^(?<project>[^\.]+)\.(?<domain>.*)$" "$domain";
    }

    server {
        root /app/public;

        listen 8080;

        location / {
            default_type text/html;
            content_by_lua '
                require("lapis").serve("app")
            ';
        }

        location /static/ {
            alias static/;
        }

        location /favicon.ico {
            alias static/favicon.ico;
        }
    }

    server {
        root /app/public;

        listen 80;
        listen 443 ssl;

        location /robots.txt {
            echo "User-agent: *";
            echo "Disallow: /";
        }

        location / {
            set $ssh_port '';
            set $fqdn $user_host;

            resolver 127.0.0.11;

            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                local ok, err = red:connect("redis", 6379)
                if not ok then
                    ngx.log(ngx.ERR, "failed to connect: ", err)
                    return ngx.exit(500)
                end

                local key = ngx.var.fqdn .. ":" .. ngx.var.server_port

                local port, err = red:get(key)
                if not port then
                    ngx.log(ngx.ERR, "failed to get key: ", key, ", err: ", err, ", port: ", port)
                    return ngx.exit(403)
                end

                if port == ngx.null then
                    ngx.log(ngx.ERR, "no port found for key ", key)
                    return ngx.exit(404)
                end

                ngx.var.ssh_port = port
            }

            proxy_set_header Host $project_host;
            proxy_pass $scheme://ssh:$ssh_port$request_uri;
            proxy_intercept_errors on;
        }
    }
}
